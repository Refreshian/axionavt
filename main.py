from fastapi import Body, FastAPI
from sklearn import preprocessing
from sklearn.discriminant_analysis import StandardScaler
from sklearn.preprocessing import MinMaxScaler
import uvicorn
import requests
from urllib.parse import urlencode
import pandas as pd
import plotly.graph_objects as go
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse, RedirectResponse
import sys
import os
import glob
import numpy as np

from fastapi.middleware.wsgi import WSGIMiddleware

app = FastAPI()
templates = Jinja2Templates(directory="templates")


@app.get("/map/{value}")
def get_map_data(value: str):
    """
    Получение данных для отображения карты
    #
    Выводит данные по ценности (value)
    #
    Если данных по ценности нет выводит ошибку "No data Map!"
    #
    Параметр values выводит список всех ценностей, которые запланированы по проекту
    #
    Параметр actual_values выведет список ценностей, данные по которым есть в настоящий момент
    """
    if value == "values":
        values_dict = {'beauty': 'красота', 'faith': 'вера', 'good': 'благо', 'evolution': 'развитие', 'justice': 'справедливость', 'knowledge': 'знание',
                       'nature': 'природа', 'genus': 'род', 'family': 'семья', 'mastery': 'мастерство', 'solvency': 'состоятельность', 'wisdom': 'мудрость'}
        return values_dict

    elif value == "actual_values":

        os.chdir('/home/admin-rggu/rggu-map/data/')
        files = glob.glob('*.xlsx')
        files = [x.replace('.xlsx', '').replace('data_reg_', '')
                 for x in files]
        return {"actual_values": files}

    elif value in ["nature"]:
        ###
        filename = "data_reg_" + value + ".xlsx"
        os.chdir('/home/admin-rggu/rggu-map/data/')
        df = pd.read_excel(filename, sheet_name='Лист1', engine='openpyxl')

        # заменяем отсутствующие значения в регионе на средние значения показателя по всем регионам
        column_list = list(df.columns)

        for i in range(1, len(column_list)):
            df[column_list[i]].fillna(df[column_list[i]].mean(), inplace=True)

        # различающиеся показатели по регионам
        no_one_data = []
        # неизменяемые (одинаковые для всех регионов) данные
        one_data = []
        count = 0

        for i in range(1, len(column_list)):
            if len(set(df[column_list[i]].values)) > 1:
                no_one_data.append(column_list[i])
                count += 1
            else:
                one_data.append(column_list[i])

        print('Есть различающихся данных по регионам: {}'.format(count)) 
        print('Не различающихся данных по регионам: {}'.format(
            len(column_list) - count))
        print('Процент варьирующихся показателей: {}%'.format(
            np.round(count / len(column_list)*100, 2)))

        # коэффициенты + и - для конкретных изменяемых по регионам показателей
        plus = ['Выход живых телят на сто коров и нетелей', 'Доля направленных на захоронение твёрдых коммунальных отходов, в том числе прошедших обработку (сортировку), в общей массе образованных твёрдых коммунальных отходов (G2)',
                'Закрепление на местности границ водоохранных зон и прибрежных защитных полос специальными информационными знаками',
                'Закрепление на местности границ водоохранных зон и прибрежных защитных полос специальными информационными знаками.1', 'Залужение земель в прибрежных защитных полосах', 'Затраты на определение границ водоохранных зон и прибрежных защитных полос',
                'Капитальный и текущий ремонт ГТС',
                'Облесение прибрежных защитных полос', 'Прочие водохозяйственные и водоохранные работы',
                'Расчистка акватории водохранилищ, озер и прудов, направленная на охрану водных объектов',
                'Расчистка участков русел рек, каналов и др. направленная на охрану водных объектов',
                'Расчистка, дноуглубление, и другие мероприятия на участках русел рек и каналов, направленные на снижение негативного воздействия вод',
                'Строительство и реконструкция водохранилищ и водохозяйственных систем комплексного назначения, обеспечивающих прирост воодоотдачи для нужд населения и производственной деятельности',
                'Строительство и реконструкция сооружений инженерной защиты от наводнений и другого негативного воздействия вод',
                'Строительство, реконструкция и ремонт очистных сооружений и канализационных сетей',
                'Строительство, реконструкция и ремонт систем оборотного (повторно-последовательного) водоснабжения', 'Количество использованных отходов производства и потребления',
                'Количество ликвидированных несанкционированных свалок в границах городов (G1)',
                'Количество населения, вовлеченного в мероприятия по очистке берегов водных объектов (G8)',
                'Количество обезвреженных отходов производства и потребления (тонна, раз в год на определенную дату)', 'Количество выполненных работ по устройству противопожарных барьеров и разрывов']

        minus = ['Доля направленных на захоронение твёрдых коммунальных отходов, в том числе прошедших обработку (сортировку), в общей массе образованных твёрдых коммунальных отходов (G2)',
                 'Доля направленных на утилизацию отходов, выделенных в результате раздельного накопления и обработки (сортировки) твёрдых коммунальных отходов, в общей массе образованных твёрдых коммунальных отходов',
                 'Доля твёрдых коммунальных отходов, направленных на обработку (сортировку), в общей массе образованных твёрдых коммунальных отходов (G2)',
                 'Забор воды из природных водных объектов (2009, ежегодно)', 'Использование воды (миллион кубических метров, ежегодно)', 'Количество выполненных работ по строительству, реконструкции и содержанию дорог противопожарного назначения',
                 'Количество выполненных работ по устройству минерализованных полос (километр (тысяча метров))',
                 'Количество городов, в которых среднегодовые концентрации одного или нескольких веществ превышали 1 ПДК (единица, раз в год на определенную дату)',
                 'Количество городов, в которых уровень загрязнения высокий (ИЗА>7) (единица, раз в год на определенную дату)', 'Количество образованных отходов производства и потребления (тонна, раз в год на определенную дату)']

        neutral = ['Количество осадков в июле (миллиметр)',
                   'Количество осадков в январе (миллиметр)']

        # умножаем на -1 отрицатльные параметры для природы
        for i in range(len(minus)):
            df[minus[i]] = [x*-1 for x in df[minus[i]].values]

        # столбец с суммой всех показателей
        df['sum'] = df[list(df.columns[1:])].sum(axis=1)

        # Perform Scaling
        scaler = MinMaxScaler()  # Min-Max Scaling

        # Perform Normalization
        normalizer = StandardScaler()  # Z-score Normalization

        # list(df_variable['Выход живых телят на сто коров и нетелей'].values)

        def normalyze(data):
            x_array = np.array(data.values)
            normalized_arr = preprocessing.normalize([x_array])
            return normalized_arr

        # нормализация неизменяемых данных
        for i in range(len(one_data)):
            df[one_data[i]] = normalyze(df[one_data[i]])[0]

        # нормализация изменяемых данных
        for i in range(len(no_one_data)):
            df[no_one_data[i]] = normalyze(df[no_one_data[i]])[0]

        # sum нормализация
        df['sum'] = df[list(df.columns[1:])].drop('sum', axis=1).sum(axis=1)
        df['sum'] = [np.round(x, 3) for x in df['sum'].values]

        # словарь с расчетными данными по регионам
        df['Регион'] = [x.strip() for x in df['Регион'].values]
        dict_val = df.set_index('Регион').to_dict()['sum']

        return dict_val
    else:
        return "No data Map"


@app.get("/region_id/{value}")
def get_region(value: int):
    """
    Возвращает имя региона по его id
    #
    Параметр value=100 возвращается все регионы
    """
    regions_dict = {1: 'Алтайский край', 2: 'Амурская область', 3: 'Архангельская область', 4: 'Астраханская область', 5: 'Белгородская область', 6: 'Брянская область', 7: 'Владимирская область', 8: 'Волгоградская область', 9: 'Вологодская область', 10: 'Воронежская область', 11: 'Город Москва столица Российской Федерации город федерального значения', 12: 'Город Санкт-Петербург город федерального значения', 13: 'Город федерального зачения Севастополь', 14: 'Еврейская автономная область', 15: 'Забайкальский край', 16: 'Ивановская область', 17: 'Иркутская область', 18: 'Кабардино-Балкарская Республика', 19: 'Калининградская область', 20: 'Калужская область', 21: 'Камчатский край', 22: 'Карачаево-Черкесская Республика', 23: 'Кемеровская область - Кузбасс', 24: 'Кировская область', 25: 'Костромская область', 26: 'Краснодарский край', 27: 'Красноярский край', 28: 'Курганская область', 29: 'Курская область', 30: 'Ленинградская область', 31: 'Липецкая область', 32: 'Магаданская область', 33: 'Московская область', 34: 'Мурманская область', 35: 'Ненецкий автономный округ', 36: 'Нижегородская область', 37: 'Новгородская область', 38: 'Новосибирская область', 39: 'Омская область', 40: 'Оренбургская область', 41: 'Орловская область', 42: 'Пензенская область', 43: 'Пермский край',
                    44: 'Приморский край', 45: 'Псковская область', 46: 'Республика Адыгея (Адыгея)', 47: 'Республика Алтай', 48: 'Республика Башкортостан', 49: 'Республика Бурятия', 50: 'Республика Дагестан', 51: 'Республика Ингушетия', 52: 'Республика Калмыкия', 53: 'Республика Карелия', 54: 'Республика Коми', 55: 'Республика Крым', 56: 'Республика Марий Эл', 57: 'Республика Мордовия', 58: 'Республика Саха (Якутия)', 59: 'Республика Северная Осетия - Алания', 60: 'Республика Татарстан (Татарстан)', 61: 'Республика Тыва', 62: 'Республика Хакасия', 63: 'Ростовская область', 64: 'Рязанская область', 65: 'Самарская область', 66: 'Саратовская область', 67: 'Сахалинская область', 68: 'Свердловская область', 69: 'Смоленская область', 70: 'Ставропольский край', 71: 'Тамбовская область', 72: 'Тверская область', 73: 'Томская область', 74: 'Тульская область', 75: 'Тюменская область', 76: 'Удмуртская Республика', 77: 'Ульяновская область', 78: 'Хабаровский край', 79: 'Ханты-Мансийский автономный округ - Югра', 80: 'Челябинская область', 81: 'Чеченская Республика', 82: 'Чувашская Республика - Чувашия', 83: 'Чукотский автономный округ', 84: 'Ямало-Ненецкий автономный округ', 85: 'Ярославская область', 86: 'Луганская область', 87: 'Донецкая область', 88: 'Запорожская область', 89: 'Херсонская область'}
    if value == 100:
        return regions_dict
    else:
        return {"id": value, "name": regions_dict[value]}


if __name__ == '__main__':
    uvicorn.run('main:app', host="0.0.0.0", port=5000, reload=True)